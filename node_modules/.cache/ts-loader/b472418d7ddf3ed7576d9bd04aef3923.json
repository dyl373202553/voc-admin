{"remainingRequest":"C:\\Users\\YaLiDai\\Desktop\\voc-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\YaLiDai\\Desktop\\voc-admin\\node_modules\\ts-loader\\index.js??ref--13-2!C:\\Users\\YaLiDai\\Desktop\\voc-admin\\src\\store\\module\\user.ts","dependencies":[{"path":"C:\\Users\\YaLiDai\\Desktop\\voc-admin\\src\\store\\module\\user.ts","mtime":1600148935045},{"path":"C:\\Users\\YaLiDai\\Desktop\\voc-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\YaLiDai\\Desktop\\voc-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\YaLiDai\\Desktop\\voc-admin\\node_modules\\ts-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJDOi9Vc2Vycy9ZYUxpRGFpL0Rlc2t0b3Avdm9jLWFkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOi9Vc2Vycy9ZYUxpRGFpL0Rlc2t0b3Avdm9jLWFkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzovVXNlcnMvWWFMaURhaS9EZXNrdG9wL3ZvYy1hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIkM6L1VzZXJzL1lhTGlEYWkvRGVza3RvcC92b2MtYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tICJDOi9Vc2Vycy9ZYUxpRGFpL0Rlc2t0b3Avdm9jLWFkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlciI7CmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IFZ1ZXhNb2R1bGUsIE1vZHVsZSwgQWN0aW9uLCBNdXRhdGlvbiwgZ2V0TW9kdWxlIH0gZnJvbSAidnVleC1tb2R1bGUtZGVjb3JhdG9ycyI7CmltcG9ydCBzdG9yZSBmcm9tICJAL3N0b3JlIjsKaW1wb3J0IHsgbG9naW4sIHJlZnJlc2gsIGdldFVzZXIgYXMgX2dldFVzZXIgfSBmcm9tICdAL2FwaS91c2VyJzsKaW1wb3J0IENvb2tpZXMgZnJvbSAnanMtY29va2llJzsKdmFyIFRPS0VOX0tFWSA9ICdrbXBvcnRhbHRva2VuJzsKdmFyIFJFVE9LRU4gPSAna21wb3J0YWxyZWZyZXNodG9rZW4nOwp2YXIgRVhQSVJFU0lOID0gJ2ttcG9ydGFsZXhwaXJlc19pbic7CnZhciBCVUlMRFRJTUUgPSAna21wb3J0YWxidWlsZFRpbWUnOwp2YXIgVVNFUiA9ICJ1c2VyIjsKCnZhciBVc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVnVleE1vZHVsZSkgewogIF9pbmhlcml0cyhVc2VyLCBfVnVleE1vZHVsZSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVXNlcik7CgogIGZ1bmN0aW9uIFVzZXIoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVzZXIpOwoKICAgIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICBfdGhpcy5yZWZyZXNoVG9rZW4gPSBfdGhpcy5nZXRSZVRva2VuVmFsdWUoKTsKICAgIF90aGlzLmV4cGlyZXNJbiA9IF90aGlzLmdldEV4cGlyZXNpblZhbHVlKCk7CiAgICBfdGhpcy5idWlsZFRpbWUgPSBfdGhpcy5nZXRCdWlsZFRpbWVWYWx1ZSgpOwogICAgX3RoaXMudG9rZW4gPSBfdGhpcy5nZXRUb2tlblZhbHVlKCk7CiAgICBfdGhpcy51c2VyID0gX3RoaXMuZ2V0VXNlclZhbHVlKCk7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVXNlciwgW3sKICAgIGtleTogIlNFVF9UT0tFTiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gU0VUX1RPS0VOKHRva2VuKSB7CiAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJTRVRfUkVGUkVTSFRPS0VOIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBTRVRfUkVGUkVTSFRPS0VOKHJlZnJlc2hUb2tlbikgewogICAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IHJlZnJlc2hUb2tlbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJTRVRfRVhQSVJFU0lOIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBTRVRfRVhQSVJFU0lOKGV4cGlyZXNJbikgewogICAgICB0aGlzLmV4cGlyZXNJbiA9IGV4cGlyZXNJbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJTRVRfQlVJTERUSU1FIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBTRVRfQlVJTERUSU1FKHZhbHVlKSB7CiAgICAgIHRoaXMuYnVpbGRUaW1lID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiU0VUX1VTRVIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIFNFVF9VU0VSKHVzZXIpIHsKICAgICAgdGhpcy51c2VyID0gdXNlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1Rva2VuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfaXNUb2tlbiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgdG9rZW4sIHJldG9rZW4sIGV4cGlyZXMsIGJ1aWxkVGltZSwgX2lzVG9rZW4yOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0b2tlbiA9IENvb2tpZXMuZ2V0KFRPS0VOX0tFWSk7CiAgICAgICAgICAgICAgICByZXRva2VuID0gQ29va2llcy5nZXQoUkVUT0tFTik7CiAgICAgICAgICAgICAgICBleHBpcmVzID0gQ29va2llcy5nZXQoRVhQSVJFU0lOKSA/IE51bWJlcihDb29raWVzLmdldChFWFBJUkVTSU4pKSA6IDA7CiAgICAgICAgICAgICAgICBidWlsZFRpbWUgPSBDb29raWVzLmdldChCVUlMRFRJTUUpID8gTnVtYmVyKENvb2tpZXMuZ2V0KEJVSUxEVElNRSkpIDogMDsKCiAgICAgICAgICAgICAgICBpZiAoIShleHBpcmVzICE9IDAgJiYgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gYnVpbGRUaW1lKSAvIDEwMDAgPiBleHBpcmVzKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUmVmcmVzaFRva2VuKCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9pc1Rva2VuMiA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBfaXNUb2tlbjIpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgaWYgKCEodG9rZW4gJiYgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gYnVpbGRUaW1lKSAvIDEwMDAgPCBleHBpcmVzKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRydWUpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGlzVG9rZW4oKSB7CiAgICAgICAgcmV0dXJuIF9pc1Rva2VuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpc1Rva2VuOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiTG9naW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9Mb2dpbiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoX3JlZikgewogICAgICAgIHZhciB1c2VyTmFtZSwgcGFzc1dvcmQsIHJlcywgYWNjZXNzX3Rva2VuLCByZWZyZXNoX3Rva2VuLCBleHBpcmVzX2luOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB1c2VyTmFtZSA9IF9yZWYudXNlck5hbWUsIHBhc3NXb3JkID0gX3JlZi5wYXNzV29yZDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBsb2dpbih7CiAgICAgICAgICAgICAgICAgIHVzZXJOYW1lOiB1c2VyTmFtZSwKICAgICAgICAgICAgICAgICAgcGFzc1dvcmQ6IHBhc3NXb3JkCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW4gPSByZXMuYWNjZXNzX3Rva2VuLCByZWZyZXNoX3Rva2VuID0gcmVzLnJlZnJlc2hfdG9rZW4sIGV4cGlyZXNfaW4gPSByZXMuZXhwaXJlc19pbjsKCiAgICAgICAgICAgICAgICBpZiAoIWFjY2Vzc190b2tlbikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKHJlcyk7CiAgICAgICAgICAgICAgICB0aGlzLlNFVF9UT0tFTihhY2Nlc3NfdG9rZW4pOwogICAgICAgICAgICAgICAgdGhpcy5TRVRfUkVGUkVTSFRPS0VOKHJlZnJlc2hfdG9rZW4pOwogICAgICAgICAgICAgICAgdGhpcy5TRVRfRVhQSVJFU0lOKGV4cGlyZXNfaW4pOwogICAgICAgICAgICAgICAgdGhpcy5TRVRfQlVJTERUSU1FKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gNjAwMDApOwogICAgICAgICAgICAgICAgdGhpcy5nZXRVc2VyKGFjY2Vzc190b2tlbik7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gTG9naW4oX3gpIHsKICAgICAgICByZXR1cm4gX0xvZ2luLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBMb2dpbjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImdldFVzZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRVc2VyMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoYWNjZXNzX3Rva2VuKSB7CiAgICAgICAgdmFyIF95aWVsZCRfZ2V0VXNlciwgdXNlcjsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0VXNlcigpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfeWllbGQkX2dldFVzZXIgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIHVzZXIgPSBfeWllbGQkX2dldFVzZXIudXNlcjsKICAgICAgICAgICAgICAgIHVzZXIuaXNEZXB0TWFuYWdlID0gMDsKICAgICAgICAgICAgICAgIHVzZXIuaXNNYW5hZ2UgPSAwOwogICAgICAgICAgICAgICAgdGhpcy5TRVRfVVNFUih1c2VyKTsKICAgICAgICAgICAgICAgIENvb2tpZXMuc2V0KFVTRVIsIHVzZXIpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRVc2VyKF94MikgewogICAgICAgIHJldHVybiBfZ2V0VXNlcjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldFVzZXI7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJzZXRBbGxWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QWxsVmFsdWUoKSB7CiAgICAgIHRoaXMuZ2V0VXNlcih0aGlzLnRva2VuLnRvU3RyaW5nKCkpOwogICAgfQogIH0sIHsKICAgIGtleTogIlJlZnJlc2hUb2tlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX1JlZnJlc2hUb2tlbiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIHJlcywgYWNjZXNzX3Rva2VuLCByZWZyZXNoX3Rva2VuLCBleHBpcmVzX2luOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVmcmVzaCh0aGlzLnJlZnJlc2hUb2tlbik7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuID0gcmVzLmFjY2Vzc190b2tlbiwgcmVmcmVzaF90b2tlbiA9IHJlcy5yZWZyZXNoX3Rva2VuLCBleHBpcmVzX2luID0gcmVzLmV4cGlyZXNfaW47CgogICAgICAgICAgICAgICAgaWYgKCFhY2Nlc3NfdG9rZW4pIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZShyZXMpOwogICAgICAgICAgICAgICAgdGhpcy5TRVRfVE9LRU4oYWNjZXNzX3Rva2VuKTsKICAgICAgICAgICAgICAgIHRoaXMuU0VUX1JFRlJFU0hUT0tFTihyZWZyZXNoX3Rva2VuKTsKICAgICAgICAgICAgICAgIHRoaXMuU0VUX0VYUElSRVNJTihleHBpcmVzX2luKTsKICAgICAgICAgICAgICAgIHRoaXMuU0VUX0JVSUxEVElNRShuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIDYwMDAwKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCB0cnVlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBSZWZyZXNoVG9rZW4oKSB7CiAgICAgICAgcmV0dXJuIF9SZWZyZXNoVG9rZW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIFJlZnJlc2hUb2tlbjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInNldFZhbHVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkgewogICAgICB2YXIgYWNjZXNzX3Rva2VuID0gdmFsdWUuYWNjZXNzX3Rva2VuLAogICAgICAgICAgcmVmcmVzaF90b2tlbiA9IHZhbHVlLnJlZnJlc2hfdG9rZW4sCiAgICAgICAgICBleHBpcmVzX2luID0gdmFsdWUuZXhwaXJlc19pbjsKICAgICAgQ29va2llcy5zZXQoVE9LRU5fS0VZLCBhY2Nlc3NfdG9rZW4pOwogICAgICBDb29raWVzLnNldChSRVRPS0VOLCByZWZyZXNoX3Rva2VuKTsKICAgICAgQ29va2llcy5zZXQoRVhQSVJFU0lOLCBTdHJpbmcoZXhwaXJlc19pbikpOwogICAgICB2YXIgYnVpbGRUaW1lID0gU3RyaW5nKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gNjAwMDApOwogICAgICBDb29raWVzLnNldChCVUlMRFRJTUUsIGJ1aWxkVGltZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiUmVzZXRUb2tlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gUmVzZXRUb2tlbigpIHsKICAgICAgdGhpcy5yZW1vdmVMb2dpbigpOwogICAgICB0aGlzLlNFVF9UT0tFTigiIik7CiAgICAgIHRoaXMuU0VUX1JFRlJFU0hUT0tFTigiIik7CiAgICAgIHRoaXMuU0VUX0VYUElSRVNJTigwKTsKICAgICAgdGhpcy5TRVRfQlVJTERUSU1FKDApOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbW92ZUxvZ2luIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVMb2dpbigpIHsKICAgICAgQ29va2llcy5yZW1vdmUoVE9LRU5fS0VZKTsKICAgICAgQ29va2llcy5yZW1vdmUoUkVUT0tFTik7CiAgICAgIENvb2tpZXMucmVtb3ZlKEVYUElSRVNJTik7CiAgICAgIENvb2tpZXMucmVtb3ZlKEJVSUxEVElNRSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VXNlclZhbHVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0VXNlclZhbHVlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgaXNUb2tlbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNUb2tlbigpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBpc1Rva2VuID0gX2NvbnRleHQ1LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKGlzVG9rZW4pIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgSlNPTi5wYXJzZShTdHJpbmcoQ29va2llcy5nZXQoVVNFUikpKSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldFVzZXJWYWx1ZSgpIHsKICAgICAgICByZXR1cm4gX2dldFVzZXJWYWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0VXNlclZhbHVlOwogICAgfSgpCiAgfSwgewogICAga2V5OiAibW9uaXRvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX21vbml0b3IgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KCkgewogICAgICAgIHZhciBleHBpcmVzSW4sIGJ1aWxkVGltZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwaXJlc0luOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBleHBpcmVzSW4gPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkVGltZTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgYnVpbGRUaW1lID0gX2NvbnRleHQ2LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKGV4cGlyZXNJbiAhPSAwICYmIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGJ1aWxkVGltZSkgLyAxMDAwID4gMTAwMDApIHsKICAgICAgICAgICAgICAgICAgdGhpcy5SZWZyZXNoVG9rZW4oKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwaXJlc0luICE9IDAgJiYgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gYnVpbGRUaW1lKSAvIDEwMDAgPiBleHBpcmVzSW4pIHsKICAgICAgICAgICAgICAgICAgdGhpcy5Mb2dpbih7CiAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6ICIwODA0NTUzRTUzRDJFNUJBIiwKICAgICAgICAgICAgICAgICAgICBwYXNzV29yZDogIkI2RDk5QUQ0QTg1NjYzN0I3RjE0MDQyNzA4NjMyQjI2IgogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gbW9uaXRvcigpIHsKICAgICAgICByZXR1cm4gX21vbml0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG1vbml0b3I7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJnZXRUb2tlblZhbHVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0VG9rZW5WYWx1ZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgdmFyIGlzVG9rZW47CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVG9rZW4oKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgaXNUb2tlbiA9IF9jb250ZXh0Ny5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChpc1Rva2VuKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsICIiKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIENvb2tpZXMuZ2V0KFRPS0VOX0tFWSkpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTcsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRUb2tlblZhbHVlKCkgewogICAgICAgIHJldHVybiBfZ2V0VG9rZW5WYWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0VG9rZW5WYWx1ZTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImdldFJlVG9rZW5WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldFJlVG9rZW5WYWx1ZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgdmFyIGlzVG9rZW47CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVG9rZW4oKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgaXNUb2tlbiA9IF9jb250ZXh0OC5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChpc1Rva2VuKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsICIiKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsIENvb2tpZXMuZ2V0KFJFVE9LRU4pKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0UmVUb2tlblZhbHVlKCkgewogICAgICAgIHJldHVybiBfZ2V0UmVUb2tlblZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRSZVRva2VuVmFsdWU7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJnZXRFeHBpcmVzaW5WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldEV4cGlyZXNpblZhbHVlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHsKICAgICAgICB2YXIgaXNUb2tlbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNUb2tlbigpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBpc1Rva2VuID0gX2NvbnRleHQ5LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKGlzVG9rZW4pIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgMCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuYWJydXB0KCJyZXR1cm4iLCBOdW1iZXIoQ29va2llcy5nZXQoRVhQSVJFU0lOKSkpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTksIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRFeHBpcmVzaW5WYWx1ZSgpIHsKICAgICAgICByZXR1cm4gX2dldEV4cGlyZXNpblZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRFeHBpcmVzaW5WYWx1ZTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImdldEJ1aWxkVGltZVZhbHVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0QnVpbGRUaW1lVmFsdWUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgICB2YXIgaXNUb2tlbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc1Rva2VuKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGlzVG9rZW4gPSBfY29udGV4dDEwLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKGlzVG9rZW4pIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iLCAwKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iLCBOdW1iZXIoQ29va2llcy5nZXQoQlVJTERUSU1FKSkpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldEJ1aWxkVGltZVZhbHVlKCkgewogICAgICAgIHJldHVybiBfZ2V0QnVpbGRUaW1lVmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldEJ1aWxkVGltZVZhbHVlOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gVXNlcjsKfShWdWV4TW9kdWxlKTsKCl9fZGVjb3JhdGUoW011dGF0aW9uXSwgVXNlci5wcm90b3R5cGUsICJTRVRfVE9LRU4iLCBudWxsKTsKCl9fZGVjb3JhdGUoW011dGF0aW9uXSwgVXNlci5wcm90b3R5cGUsICJTRVRfUkVGUkVTSFRPS0VOIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtNdXRhdGlvbl0sIFVzZXIucHJvdG90eXBlLCAiU0VUX0VYUElSRVNJTiIsIG51bGwpOwoKX19kZWNvcmF0ZShbTXV0YXRpb25dLCBVc2VyLnByb3RvdHlwZSwgIlNFVF9CVUlMRFRJTUUiLCBudWxsKTsKCl9fZGVjb3JhdGUoW011dGF0aW9uXSwgVXNlci5wcm90b3R5cGUsICJTRVRfVVNFUiIsIG51bGwpOwoKX19kZWNvcmF0ZShbQWN0aW9uXSwgVXNlci5wcm90b3R5cGUsICJpc1Rva2VuIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtBY3Rpb25dLCBVc2VyLnByb3RvdHlwZSwgIkxvZ2luIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtBY3Rpb25dLCBVc2VyLnByb3RvdHlwZSwgImdldFVzZXIiLCBudWxsKTsKCl9fZGVjb3JhdGUoW0FjdGlvbl0sIFVzZXIucHJvdG90eXBlLCAic2V0QWxsVmFsdWUiLCBudWxsKTsKCl9fZGVjb3JhdGUoW0FjdGlvbl0sIFVzZXIucHJvdG90eXBlLCAiUmVmcmVzaFRva2VuIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtBY3Rpb25dLCBVc2VyLnByb3RvdHlwZSwgInNldFZhbHVlIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtBY3Rpb25dLCBVc2VyLnByb3RvdHlwZSwgIlJlc2V0VG9rZW4iLCBudWxsKTsKCl9fZGVjb3JhdGUoW0FjdGlvbl0sIFVzZXIucHJvdG90eXBlLCAicmVtb3ZlTG9naW4iLCBudWxsKTsKCl9fZGVjb3JhdGUoW0FjdGlvbl0sIFVzZXIucHJvdG90eXBlLCAiZ2V0VXNlclZhbHVlIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtBY3Rpb25dLCBVc2VyLnByb3RvdHlwZSwgIm1vbml0b3IiLCBudWxsKTsKCl9fZGVjb3JhdGUoW0FjdGlvbl0sIFVzZXIucHJvdG90eXBlLCAiZ2V0VG9rZW5WYWx1ZSIsIG51bGwpOwoKX19kZWNvcmF0ZShbTXV0YXRpb25dLCBVc2VyLnByb3RvdHlwZSwgImdldFJlVG9rZW5WYWx1ZSIsIG51bGwpOwoKX19kZWNvcmF0ZShbTXV0YXRpb25dLCBVc2VyLnByb3RvdHlwZSwgImdldEV4cGlyZXNpblZhbHVlIiwgbnVsbCk7CgpfX2RlY29yYXRlKFtNdXRhdGlvbl0sIFVzZXIucHJvdG90eXBlLCAiZ2V0QnVpbGRUaW1lVmFsdWUiLCBudWxsKTsKClVzZXIgPSBfX2RlY29yYXRlKFtNb2R1bGUoewogIGR5bmFtaWM6IHRydWUsCiAgc3RvcmU6IHN0b3JlLAogIG5hbWU6ICJ1c2VyIgp9KV0sIFVzZXIpOwpleHBvcnQgdmFyIFVzZXJNb2R1bGUgPSBnZXRNb2R1bGUoVXNlcik7"},{"version":3,"sources":["C:\\Users\\YaLiDai\\Desktop\\voc-admin\\src\\store\\module\\user.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    VuexModule,\r\n    Module,\r\n    Action,\r\n    Mutation,\r\n    getModule\r\n} from \"vuex-module-decorators\";\r\nimport store from \"@/store\";\r\nimport { login, refresh, getUser } from '@/api/user'\r\n\r\nimport Cookies from 'js-cookie'\r\n\r\nconst TOKEN_KEY = 'kmportaltoken';\r\nconst RETOKEN = 'kmportalrefreshtoken'\r\nconst EXPIRESIN = 'kmportalexpires_in'\r\nconst BUILDTIME = 'kmportalbuildTime'\r\nconst USER = \"user\"\r\n\r\nexport interface UserState {\r\n    token: any;\r\n    refreshToken: any;\r\n    expiresIn: any;\r\n    buildTime: any;\r\n    user: any\r\n}\r\n\r\n@Module({ dynamic: true, store, name: \"user\" })\r\nclass User extends VuexModule implements UserState {\r\n    public refreshToken = this.getReTokenValue();\r\n    public expiresIn = this.getExpiresinValue();\r\n    public buildTime = this.getBuildTimeValue();\r\n    public token = this.getTokenValue();\r\n    public user = this.getUserValue();\r\n\r\n    @Mutation\r\n    private SET_TOKEN(token: any): void {\r\n        this.token = token;\r\n    }\r\n\r\n    @Mutation\r\n    private SET_REFRESHTOKEN(refreshToken: any): void {\r\n        this.refreshToken = refreshToken;\r\n    }\r\n\r\n    @Mutation\r\n    private SET_EXPIRESIN(expiresIn: any): void {\r\n        this.expiresIn = expiresIn\r\n    }\r\n\r\n    @Mutation\r\n    private SET_BUILDTIME(value: any): void {\r\n        this.buildTime = value\r\n    }\r\n\r\n    @Mutation\r\n    private SET_USER(user: any) {\r\n        this.user = user\r\n    }\r\n\r\n\r\n    @Action\r\n    public async isToken(): Promise<boolean> {\r\n        let token: string | undefined = Cookies.get(TOKEN_KEY)\r\n        let retoken: string | undefined = Cookies.get(RETOKEN)\r\n        let expires: number = Cookies.get(EXPIRESIN) ? Number(Cookies.get(EXPIRESIN)) : 0\r\n        let buildTime: number = Cookies.get(BUILDTIME) ? Number(Cookies.get(BUILDTIME)) : 0\r\n\r\n        if (expires != 0 && (new Date().getTime() - buildTime) / 1000 > expires) {\r\n            let isToken: boolean = await this.RefreshToken()\r\n            return isToken;\r\n        } else if (token && (new Date().getTime() - buildTime) / 1000 < expires) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Action\r\n    public async Login({ userName, passWord }: { userName: string; passWord: string }) {\r\n        let res = await login({ userName, passWord });\r\n        let { access_token, refresh_token, expires_in } = res\r\n        if (access_token) {\r\n            this.setValue(res);\r\n            this.SET_TOKEN(access_token);\r\n            this.SET_REFRESHTOKEN(refresh_token);\r\n            this.SET_EXPIRESIN(expires_in);\r\n            this.SET_BUILDTIME(new Date().getTime() - 60000);\r\n            this.getUser(access_token)\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    @Action\r\n    public async getUser(access_token: string) {\r\n        let { user } = await getUser()\r\n        user.isDeptManage = 0\r\n        user.isManage = 0\r\n\r\n        this.SET_USER(user)\r\n        Cookies.set(USER, user)\r\n    }\r\n\r\n    @Action\r\n    setAllValue() {\r\n        this.getUser(this.token.toString())\r\n    }\r\n\r\n    @Action\r\n    public async RefreshToken(): Promise<boolean> {\r\n        let res = await refresh(this.refreshToken);\r\n        let { access_token, refresh_token, expires_in } = res;\r\n\r\n        if (access_token) {\r\n            this.setValue(res);\r\n            this.SET_TOKEN(access_token);\r\n            this.SET_REFRESHTOKEN(refresh_token);\r\n            this.SET_EXPIRESIN(expires_in);\r\n            this.SET_BUILDTIME(new Date().getTime() - 60000);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    @Action\r\n    public setValue(value: any): void {\r\n        let { access_token, refresh_token, expires_in } = value\r\n\r\n        Cookies.set(TOKEN_KEY, access_token)\r\n        Cookies.set(RETOKEN, refresh_token)\r\n        Cookies.set(EXPIRESIN, String(expires_in))\r\n\r\n        let buildTime: string = String(new Date().getTime() - 60000)\r\n        Cookies.set(BUILDTIME, buildTime)\r\n\r\n    }\r\n\r\n    @Action\r\n    public ResetToken(): void {\r\n        this.removeLogin();\r\n        this.SET_TOKEN(\"\");\r\n        this.SET_REFRESHTOKEN(\"\");\r\n        this.SET_EXPIRESIN(0);\r\n        this.SET_BUILDTIME(0);\r\n    }\r\n\r\n    @Action\r\n    private removeLogin(): void {\r\n        Cookies.remove(TOKEN_KEY);\r\n        Cookies.remove(RETOKEN);\r\n        Cookies.remove(EXPIRESIN);\r\n        Cookies.remove(BUILDTIME);\r\n    }\r\n\r\n    @Action\r\n    public async getUserValue() {\r\n        let isToken = await this.isToken()\r\n        if (!isToken) {\r\n            return {}\r\n        }\r\n        return JSON.parse(String(Cookies.get(USER)))\r\n    }\r\n\r\n    @Action\r\n    public async monitor() {\r\n        let expiresIn = await this.expiresIn\r\n        let buildTime = await this.buildTime\r\n        if (expiresIn != 0 && (new Date().getTime() - buildTime) / 1000 > 10000) {\r\n            this.RefreshToken()\r\n        } else if (expiresIn != 0 && (new Date().getTime() - buildTime) / 1000 > expiresIn) {\r\n            this.Login({ userName: \"0804553E53D2E5BA\", passWord: \"B6D99AD4A856637B7F14042708632B26\" })\r\n        }\r\n    }\r\n\r\n    @Action\r\n    private async getTokenValue() {\r\n        let isToken = await this.isToken()\r\n\r\n        if (!isToken) {\r\n            return \"\"\r\n        }\r\n\r\n        return Cookies.get(TOKEN_KEY)\r\n\r\n    }\r\n\r\n    @Mutation\r\n    private async getReTokenValue() {\r\n        let isToken = await this.isToken()\r\n        if (!isToken) {\r\n            return \"\"\r\n        }\r\n\r\n        return Cookies.get(RETOKEN)\r\n    }\r\n\r\n    @Mutation\r\n    private async getExpiresinValue() {\r\n        let isToken = await this.isToken()\r\n        if (!isToken) {\r\n            return 0\r\n        }\r\n\r\n        return Number(Cookies.get(EXPIRESIN));\r\n    }\r\n\r\n    @Mutation\r\n    private async getBuildTimeValue() {\r\n        let isToken = await this.isToken()\r\n        if (!isToken) {\r\n            return 0\r\n        }\r\n\r\n        return Number(Cookies.get(BUILDTIME));\r\n    }\r\n}\r\n\r\nexport const UserModule = getModule(User);"],"sourceRoot":""}]}